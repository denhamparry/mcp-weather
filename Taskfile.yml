version: "3"

vars:
  IMAGE_NAME: mcp-weather
  IMAGE_TAG: latest
  REGISTRY: docker.io
  REGISTRY_USER: '{{.REGISTRY_USER | default "denhamparry"}}'

tasks:
  build:
    desc: Build the project
    cmds:
      - npm install && npm run build
    silent: false

  run-stdio:
    desc: Run the project as a standard MCP server
    deps: [build]
    cmds:
      - OPENWEATHER_API_KEY={{.OPENWEATHER_API_KEY}} node build/index.js
    silent: false

  run-http:
    desc: Run the project as an HTTP server
    deps: [build]
    cmds:
      - OPENWEATHER_API_KEY={{.OPENWEATHER_API_KEY}} node build/http.js
    silent: false

  docker-build:
    desc: Build the Docker images
    cmds:
      - docker buildx build --platform linux/amd64,linux/arm64 -f
        Docker/Dockerfile.stdio
        -t  {{.REGISTRY}}/{{.REGISTRY_USER}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}}-stdio
        --push .
      - docker buildx build --platform linux/amd64,linux/arm64 -f
        Docker/Dockerfile.http
        -t  {{.REGISTRY}}/{{.REGISTRY_USER}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}}-http
        --push .
    silent: false
    preconditions:
      - sh: '[ -n "$REGISTRY_USER" ]'
        msg: "Please set REGISTRY_USER environment variable"

  docker-run-stdio:
    desc: Run the Docker container with stdio transport support
    cmds:
      - docker run -it --rm -e OPENWEATHER_API_KEY={{.OPENWEATHER_API_KEY}}
        --name {{.IMAGE_NAME}}-stdio -d
        {{.REGISTRY}}/{{.REGISTRY_USER}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}}
    silent: false
    preconditions:
      - sh: '[ -n "$OPENWEATHER_API_KEY" ]'
        msg: "Please set OPENWEATHER_API_KEY environment variable"

  docker-run-http:
    desc: Run the Docker container with streamable HTTP transport support
    cmds:
      - docker run -it --rm -e OPENWEATHER_API_KEY={{.OPENWEATHER_API_KEY}}
        --name {{.IMAGE_NAME}}-http -d -p 3000:3000
        {{.REGISTRY}}/{{.REGISTRY_USER}}/{{.IMAGE_NAME}}:{{.IMAGE_TAG}}-http
    silent: false

  docker-stop-stdio:
    desc: Stop the Docker container with stdio transport support
    cmds:
      - docker stop {{.IMAGE_NAME}}-stdio
    silent: false

  docker-stop-http:
    desc: Stop the Docker container with streamable HTTP transport support
    cmds:
      - docker stop {{.IMAGE_NAME}}-http
    silent: false

  kubernetes-apply:
    desc: Spin up MCP on a Kubernetes Cluster
    cmds:
      - kubectl create secret generic openweather-api-key
        --from-literal=OPENWEATHER_API_KEY="{{.OPENWEATHER_API_KEY}}"
      - kubectl apply -f kubernetes/pod.yaml
      - kubectl apply -f kubernetes/service.yaml
    preconditions:
      - sh: '[ -n "$OPENWEATHER_API_KEY" ]'
        msg: "Please set OPENWEATHER_API_KEY environment variable"

  kubernetes-port-forward:
    desc: Connect to the remote MCP server
    cmds:
      - kubectl port-forward svc/mcp-weather 3000:3000

  kubernetes-delete:
    desc: Delete MCP from a Kubernetes Cluster
    cmds:
      - kubectl delete -f kubernetes/
